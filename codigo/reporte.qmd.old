```{=html}

<div style="margin-top: -30em; margin-left: -4.5em;">
<img src="../imagenes/fondotp.png">
</div>
```

---
title: "Impacto del<br>Trabajo Remoto<br>en la Salud Mental"
lang: es
format: 
  html:
    grid: 
      sidebar-width: 350px
      body-width: 900px
      margin-width: 5px
    theme: 
      light: [lumen, ../resultados/reportes/ale.scss]
    toc: true
    toc-location: left
    toc-depth: 3
    code-fold: true
    output-dir: "../resultados/reportes"
embed-resources: true
page-layout: full
editor: 
  markdown: 
    wrap: 72
---

> **Materia: Análisis Inteligente de Datos** <br> **Autor:**
> AgomferAustral <br> **Fecha:** `r Sys.Date()`

::: callout-caution
Falta que guarde los datos en la carpeta de reportes
:::

::: callout-warning
Dejar la TOC para el final
:::

# Introducción

\

El trabajo remoto ha emergido como una modalidad laboral predominante en
la última década, intensificándose durante la pandemia de COVID-19. Esta
transición ha generado un cambio significativo en la dinámica laboral,
ofreciendo flexibilidad y comodidad, pero también planteando desafíos
importantes para la salud mental de los empleados. A medida que las
organizaciones adoptan el teletrabajo, surgen interrogantes sobre sus
efectos en el bienestar psicológico de los trabajadores. Este trabajo
tiene como objetivo analizar el impacto del trabajo remoto en la salud
mental, utilizando un conjunto de datos que incluye variables
demográficas, condiciones laborales y percepciones sobre el teletrabajo.

Los datos utilizados provienen de una encuesta realizada a trabajadores
durante el año 2021, y se dispone de información sobre diversos factores
que pueden influir en la salud mental, como el nivel de estrés, la
satisfacción laboral y el equilibrio entre la vida laboral y personal.
La fuente original de los datos, en formato CSV se puede obtener desde
este
[enlace](https://www.kaggle.com/datasets/waqi786/remote-work-and-mental-health "Origen de los datos de estudio")
en el sitio de Kaggle.

# Metodología

Para llevar a cabo este análisis, se utilizará un enfoque cuali y
cuantitativo basado en técnicas estadísticas que permitirán identificar
correlaciones entre las variables del conjunto de datos, conocido como
Análisis Exploratorio de Datos (EDA).\
\
Se explorarán las relaciones entre el **lugar de trabajo** (remoto vs.
híbrido vs. tradicional), el **nivel de estrés**, las **condiciones de
salud mental** reportadas y otros factores como la **frecuencia de
reuniones virtuales** y el **acceso a recursos de salud mental**.

ALERT Mensaje de una linea completa para poner algoq eu no tengo idea de
lo que podria ir

::: callout-note
NOTE Esta es una nota importante que proporciona información adicional.
:::

::: callout-tip
TIP Este es un consejo útil que puede ayudarte a mejorar tu trabajo.
:::

::: callout-warning
WARNING ¡Advertencia! Asegúrate de revisar los datos antes de proceder.
:::

::: callout-important
IMPORTANT Este es un mensaje importante que no debes ignorar.
:::

::: callout-caution
CAUTION Ten cuidado al realizar esta operación, ya que puede tener
consecuencias.
:::

## Selección de Datos

Los datos crudos obtenidos de la fuente original, se encuentran en el
archivo `Impact_of_Remote_Work_on_Mental_Health.csv` en la carpeta
`datos_crudos`. Este archivo contiene información sobre la salud mental
de los trabajadores en un contexto de trabajo remoto.

::: callout-important
El directorio de trabajo esta definido en el proyecto, por lo que habria
que abrir siempre el proyecto y no solo el archivo qmd
:::

## Importación y Limpieza de Datos

El primer paso fundamental en cualquier análisis de datos es garantizar
que la información con la que se trabaja sea confiable y esté preparada
para ser procesada. A continuación, se describe el proceso aplicado para
limpiar los datos relacionados con el impacto del trabajo remoto en la
salud mental. Este procedimiento incluyó tanto la verificación inicial
de la calidad de los datos como la eliminación de registros incompletos.

#### 1. **Carga de las bibliotecas necesarias e inicializa carpetas de salida**

Antes de interactuar con los datos, se deben cargar las bibliotecas de R
adecuadas. En este caso, se asume el uso de librerías como **`readr`**
para la lectura de archivos CSV y el conjunto **`tidyverse`** para la
manipulación de datos entre otras.

```{r}

# Cargar librerías necesarias

cargar_paquetes <- function(pckgs){
  # cargar los paquetes e instalarlos (de ser necesario)
  #
  # Argumentos: 
  #   pckgs: con el nombre de los paquetes
  new_packages     <- pckgs[!(pckgs %in% installed.packages()[, "Package"])]
  if(length(new_packages)) { install.packages(new_packages) }
  for (pckg in pckgs) {
    suppressMessages(library(pckg, character.only = TRUE) )  
  }
}

cargar_paquetes(
  c("tidyverse","dplyr", "readr", "knitr", "ggplot2","corrplot",
    "sf", "spData","RColorBrewer")
)



# Crear directorios de salida si no existen
dir.create("../datos_salida", showWarnings = FALSE)
dir.create("../resultados/graficos", showWarnings = FALSE)
```

Estas bibliotecas ofrecen funciones eficaces para manejar y transformar
conjuntos de datos de manera fluida.

#### 2. **Lectura de los datos**

Los datos se cargaron desde un archivo externo en formato CSV utilizando
la función `read_csv()` de la librería **`readr`**. El archivo se
encuentra en un directorio relativo, y se asignó a un objeto llamado
`datos`.

::: callout-tip
El directorio de trabajo es codigo, por lo que todas las referencias a
directorios comenzaran con ../
:::

```{r}

# Leer los datos

datos <- read_csv("../datos_crudos/Impact_of_Remote_Work_on_Mental_Health.csv")
               
```

#### 3. Exploración inicial de los datos

Para comprender mejor la estructura del conjunto de datos y las
características de las variables, se ejecutaron tres funciones de
exploración inicial:

-   str(datos): Muestra una descripción compacta del objeto, incluyendo
    las variables, sus tipos de datos y algunos valores representativos.
-   spec(datos): Detalla la especificación de las columnas, útil para
    confirmar que las clases de datos coinciden con las expectativas.
-   glimpse(datos): Proporciona una vista general más legible de las
    variables y valores, con un formato horizontal.

Estas funciones permiten detectar problemas iniciales, como datos mal
tipados o la presencia de valores inesperados.

```{r}

# Exploracion inicial de la estructura de datos

str(datos)

spec(datos)

glimpse(datos)

summary(datos)

```

#### 4. Limpieza de los datos

Una de las prácticas básicas de limpieza de datos es manejar los valores
ausentes (NA). En este caso, se decidió eliminarlos utilizando la
función drop_na() de la librería dplyr.

```{r}


# Limpiar datos: eliminar filas con valores NA

datos_limpios <- datos %>% drop_na()

# Comprobar si se realizaron cambios

summary(datos_limpios)

```

Esta función *summary()* genera un resumen estadístico de las variables,
permitiendo verificar si hubo cambios significativos en el tamaño del
dataset y si las distribuciones de las variables permanecen
consistentes. Reflexión

El conjunto de datos de entrada no tiene datos faltantes, por lo que el
dataframe *datos_limpios* contiene la misma información que el dataset
original.

# Dataframes por tipo de datos

```{r}

# Dataframe limpio datos numericos

dln <- datos_limpios %>%
          select(where(is.numeric))


# Dataframe limpio datos caracter

dlc <- datos_limpios %>%
          select(where(is.character))

```

# Resultados

## Medidas Descriptivas

A continuación, se presentan algunas medidas descriptivas de los datos
limpios:

```{r}

# Medidas descriptivas datos generales

summary(datos_limpios)


# Medidas descriptivas datos numericos

glimpse(dln)
summary(dln)


# Medidas descriptivas datos caracter

glimpse(dlc)
summary(dlc)

```

## Visualizaciones

Se incluyen a continuación algunas visualizaciones que ilustran los
resultados del análisis:

```{r}

# Gráfico de la distribución del estrés

#| label: fig-estres
ggplot(datos_limpios, aes(x = Stress_Level)) + 
  geom_bar(stat="count", fill = "blue", color = "black") + 
  labs(title = "Distribución del Nivel de Estrés", x = "Nivel de Estrés", y = "Frecuencia")
getwd()
ggsave("../resultados/graficos/distribucion_estres.png")

```

![Distribución del Nivel de
Estrés](../resultados/graficos/distribucion_estres.png){.lightbox}{#fig-estres}

Como se muestra en la figura \@fig-estres, los tres niveles son
comparables

# Conclusiones

El análisis realizado sugiere que el trabajo remoto tiene un impacto
significativo en la salud mental de los empleados. Las medidas
descriptivas y las visualizaciones proporcionan una visión clara de la
situación actual. Este reporte ha sido generado utilizando Quarto, lo
que garantiza su reproducibilidad y facilita la comunicación de los
resultados.

```{r}

```

> ### Contenido del archivo `analisis.R`

::: callout-note
NOTE Mensaje de una linea completa para poner algo que no tengo idea de
lo que podria ir
:::

### Generación del Reporte

::: callout-warning
WARNING Mensaje de una linea completa para poner algoq eu no tengo idea
de lo que podria ir
:::

### Consideraciones Finales

::: callout-alert
ALERT Mensaje de una linea completa para poner algoq eu no tengo idea de
lo que podria ir
:::

::: callout-note
NOTE Esta es una nota importante que proporciona información adicional.
:::

::: callout-tip
TIP Este es un consejo útil que puede ayudarte a mejorar tu trabajo.
:::

::: callout-warning
WARNING ¡Advertencia! Asegúrate de revisar los datos antes de proceder.
:::

::: callout-important
IMPORTANT Este es un mensaje importante que no debes ignorar.
:::

::: callout-caution
CAUTION Ten cuidado al realizar esta operación, ya que puede tener
consecuencias.
:::

# ------------------------------------------------------

# Segunda parte

# ------------------------------------------------------

# Limpieza y transformación de datos

```{r}

# Eliminación de columna de identificadores
datos <- datos %>%
  select(-Employee_ID)  # Elimina la columna Employee_ID

# Verificar valores únicos en Social_Isolation_Rating
valores_unicos_sir <- unique(datos$Social_Isolation_Rating)
respuesta <- tibble("Valores únicos en Social_Isolation_Rating:",
            valores_unicos_sir)

glimpse(respuesta)

kable(respuesta)

# Verificar valores únicos en Work_Life_Balance_Rating
valores_unicos_wlb <- unique(datos$Work_Life_Balance_Rating)
print("Valores únicos en Work_Life_Balance_Rating:")
print(valores_unicos_wlb)

# Verificar valores únicos en Satisfaction_with_Remote_Work
valores_unicos_srw <- unique(datos$Satisfaction_with_Remote_Work)
print("Valores únicos en Satisfaction_with_Remote_Work:")
print(valores_unicos_srw)

# Verificar valores únicos en Company_Support_for_Remote_Work
valores_unicos_csrw <- unique(datos$Company_Support_for_Remote_Work)
print("Valores únicos en Company_Support_for_Remote_Work:")
print(valores_unicos_csrw)


# Verificar valores únicos en Company_Support_for_Remote_Work
valores_unicos_sl <- unique(datos$Stress_Level)
print("Valores únicos en Stress_Level:")
print(valores_unicos_sl)

# Supongamos que ya tienes el dataframe 'datos' cargado

datos <- datos %>%
  mutate(
    Gender = as_factor(Gender),
    Job_Role = as_factor(Job_Role),
    Industry = as_factor(Industry),
    Work_Location = as_factor(Work_Location),
    Mental_Health_Condition = as_factor(Mental_Health_Condition),
    Access_to_Mental_Health_Resources = factor(Access_to_Mental_Health_Resources, levels = c("No", "Yes")),
    Region = as_factor(Region),
    
    # Mapeo de valores numéricos a palabras para Social_Isolation_Rating
    Social_Isolation_Rating = factor(recode(Social_Isolation_Rating,
                                      `1` = "Connected",
                                      `2` = "Slightly",
                                      `3` = "Moderately",
                                      `4` = "Highly",
                                      `5` = "Completely"),
                                     ordered = TRUE,
                                     levels = c("Connected", "Slightly", "Moderately", "Highly", "Completely")
                                     ),
    
    # Mapeo de valores numéricos a palabras para Work_Life_Balance_Rating
    Work_Life_Balance_Rating = factor(recode(Work_Life_Balance_Rating,
                                       `1` = "Bad",
                                       `2` = "Poor",
                                       `3` = "Average",
                                       `4` = "Good",
                                       `5` = "Excellent"),
                                      ordered = TRUE,
                                      levels = c("Bad", "Poor", "Average", "Good", "Excellent")
                                      ),
    
    # Mapeo de valores numéricos a palabras para Company_Support_for_Remote_Work
    Company_Support_for_Remote_Work = factor(recode(Company_Support_for_Remote_Work,
                                              `1` = "Bad",
                                              `2` = "Poor",
                                              `3` = "Average",
                                              `4` = "Good",
                                              `5` = "Excellent"),
                                             ordered = TRUE,
                                             levels = c("Bad", "Poor", "Average", "Good", "Excellent")
                                             ),
    
    # Conversión de Satisfaction_with_Remote_Work a factor
    Satisfaction_with_Remote_Work = factor(Satisfaction_with_Remote_Work, ordered = TRUE, levels = c("Unsatisfied", "Neutral", "Satisfied")),
    
    Productivity_Change = factor(Productivity_Change, ordered = TRUE, levels = c("Decrease","No Change", "Increase")),
    
    Physical_Activity = factor(Physical_Activity, ordered = TRUE, levels = c("None", "Weekly","Daily")),
    
    Sleep_Quality = factor(Sleep_Quality, ordered = TRUE, levels = c("Poor","Average","Good")),
    
    Stress_Level = factor(Stress_Level, ordered = TRUE, levels = c("Low","Medium","High"))
  )

# Verificar los resultados
print(head(datos))


glimpse(datos)

# Eliminar filas con valores faltantes
datos_limpios <- datos %>%
  drop_na()

glimpse(datos_limpios)

# Guardar los datos limpios
write_csv(datos_limpios, "../datos_limpios/datos_limpios.csv")

```

# Análisis descriptivo

## Variables numericas

```{r}

# Resumen estadístico de las variables numéricas
resumen_estadistico <- datos_limpios %>%
  summarise(
    across(where(is.numeric), 
          list(media = \(x) mean(x, na.rm = TRUE), 
               mediana = \(x) median(x, na.rm = TRUE),
               desvio = \(x) sd(x, na.rm = TRUE),
               minimo = \(x) min(x, na.rm = TRUE),
               máximo = \(x) max(x, na.rm = TRUE)))
  )

# Presentar el resumen en una tabla
kable(t(resumen_estadistico))

# Guardar el resumen estadístico
write_csv(resumen_estadistico, "../datos_salida/resumen_estadistico.csv")

```

## Correlacion de variables numericas

```{r}

# Paso 1: Filtrar las columnas numéricas
datos_numericos <- datos_limpios %>%
  select_if(is.numeric)

# Paso 2: Calcular la matriz de correlación
matriz_correlacion <- cor(datos_numericos, use = "complete.obs")

kable(matriz_correlacion)

```

## Variables categoricas nominales

```{r}

# Identificar variables nominales
nominales <- datos_limpios %>%
  select(where(is.factor) & !where(is.ordered)) %>%
  names()

# Resumen para variables nominales
resumen_nominales <- datos_limpios %>%
  select(all_of(nominales)) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Categoría") %>%
  group_by(Variable, Categoría) %>%
  summarise(
    Frecuencia = n(),
    Proporción = Frecuencia / nrow(datos_limpios),
    .groups = "drop"
  )

# Mostrar resúmenes
kable(resumen_nominales, caption = "Resumen de variables nominales")

# Guardar el resumen estadístico
write_csv(resumen_nominales, "../datos_salida/resumen_nominales.csv")

# Ordenar por distancia las modalidades laborales
datos_limpios$Work_Location <- factor(datos_limpios$Work_Location, levels = c("Remote", "Hybrid", "Onsite"))


```

## Variables categóricas ordinales

```{r}

# Resumen individual para variables ordinales

# Función para obtener el resumen de frecuencias y proporciones de una variable
resumen_frecuencia <- function(data, variable) {
  # Asegurarse de que la variable sea un factor
  data[[variable]] <- as.factor(data[[variable]])

  resumen <- data %>%
    group_by(.data[[variable]]) %>%
    summarise(
      Frecuencia = n(),
      Proporción = Frecuencia / nrow(data),
      .groups = "drop"
    )
  
  return(resumen)
}

# Resumen para Work_Life_Balance_Rating
resumen_work_life_balance <- resumen_frecuencia(datos_limpios, "Work_Life_Balance_Rating")
resumen_stress_level <- resumen_frecuencia(datos_limpios, "Stress_Level")
resumen_productivity_change <- resumen_frecuencia(datos_limpios, "Productivity_Change")
resumen_social_isolation <- resumen_frecuencia(datos_limpios, "Social_Isolation_Rating")
resumen_satisfaction_with_remote_work <- resumen_frecuencia(datos_limpios, "Satisfaction_with_Remote_Work")
resumen_company_support_for_remote_work <- resumen_frecuencia(datos_limpios, "Company_Support_for_Remote_Work")
resumen_physical_activity <- resumen_frecuencia(datos_limpios, "Physical_Activity")
resumen_sleep_quality <- resumen_frecuencia(datos_limpios, "Sleep_Quality")



# Mostrar resúmenes
kable(resumen_work_life_balance, caption = "Resumen de Work_Life_Balance_Rating")
kable(resumen_stress_level, caption = "Resumen de Stress_Level")
kable(resumen_productivity_change, caption = "Resumen de Productivity_Change")
kable(resumen_social_isolation, caption = "Resumen de Social_Isolation_Rating")
kable(resumen_satisfaction_with_remote_work, caption = "Resumen de Satisfaction_with_Remote_Work")
kable(resumen_company_support_for_remote_work, caption = "Resumen de Company_Support_for_Remote_Work")
kable(resumen_physical_activity, caption = "Resumen de Physical_Activity")
kable(resumen_sleep_quality, caption = "Resumen de Sleep_Quality")


# Guardar el resumen estadístico
write_csv(resumen_work_life_balance, "../datos_salida/resumen_work_life_balance.csv")
write_csv(resumen_stress_level, "../datos_salida/resumen_stress_level.csv")
write_csv(resumen_productivity_change, "../datos_salida/resumen_productivity_change.csv")
write_csv(resumen_social_isolation, "../datos_salida/resumen_social_isolation.csv")
write_csv(resumen_satisfaction_with_remote_work, "../datos_salida/resumen_satisfaction_with_remote_work.csv")
write_csv(resumen_company_support_for_remote_work, "../datos_salida/resumen_company_support_for_remote_work.csv")
write_csv(resumen_physical_activity, "../datos_salida/resumen_physical_activity.csv")
write_csv(resumen_sleep_quality, "../datos_salida/resumen_sleep_quality.csv")


```

# Visualización de datos

```{r}

colors <- brewer.pal(n = 8, name = "Set1")

```

## Mapa de calor de correlaciones de variables numericas

```{r}


# Crear el gráfico de correlación con colores pastel con los datos calculados anteriormente
corrplot(
  matriz_correlacion,
  method = "color",  # Representar correlaciones con colores
  col = brewer.pal(n = 8, name = "Pastel1"),  # Paleta pastel
  type = "upper",  # Mostrar solo la mitad superior de la matriz
  addCoef.col = "black",  # Añadir coeficientes en color negro
  tl.col = "black",  # Color de las etiquetas
  tl.srt = 45  # Girar las etiquetas 45 grados
)



```

## Distribución de la edad

```{r}

grafico_edad <- ggplot(datos_limpios, aes(x = Age)) +
  geom_histogram(binwidth = 5, fill = "#3498db", color = "gray") +
  labs(title = "Edad participantes", x = "Edad", y = "Cantidad") +
  theme_minimal()
  
ggsave("../resultados/graficos/distribucion_edad.png", plot = grafico_edad)
grafico_edad

```

## Distribucion de genero

```{r}

grafico_genero <- ggplot(datos, aes(x = Gender)) +
  geom_bar(fill = "#ccebc5") +  # Puedes cambiar el color según prefieras
  labs(title = "Genero participantes", x = "Sexo", y = "Cantidad") +
  theme_minimal()  # Estilo del gráfico
ggsave("../resultados/graficos/distribucion_genero.png", plot = grafico_genero)
grafico_genero

```

## Distribucion de rol laboral

```{r}

grafico_rol_laboral <- ggplot(datos_limpios, aes(x = Job_Role)) +
  geom_bar(binwidth = 5, fill = "#decbe4") +
  labs(title = "Roles Laborales", x = "Rol Laboral", y = "Cantidad") +
  theme_minimal()
ggsave("../resultados/graficos/distribucion_rol_laboral.png", plot = grafico_rol_laboral)
grafico_rol_laboral

```

## Distribucion de industria

```{r}

grafico_industria <- ggplot(datos_limpios, aes(x = Industry)) +
  geom_bar(binwidth = 5, fill = "#ffffcc", color = "gray") +
  labs(title = "Industrias de los participantes", x = "Industria", y = "Cantidad") +
  theme_minimal()

ggsave("../resultados/graficos/distribucion_industria.png", plot = grafico_industria)
grafico_industria

```

## Distribucion de años de experiencia por genero

```{r}

datos_limpios <- datos_limpios %>%
  mutate(Genero = recode(Gender,
                         "Non-binary" = "No binario",
                         "Female" = "Femenino",
                         "Male" = "Masculino",
                         "Prefer not to say" = "Prefiero no decir"
  ))

grafico_experiencia <- ggplot(datos_limpios, aes(x = Genero, y = Years_of_Experience, fill = Genero)) +
  geom_boxplot(outlier.color = "gray") +
  labs(
    title = "Años de Experiencia por Género",
    y = "Años de Experiencia",
    x = "Género"
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = "Pastel1")


ggsave("../resultados/graficos/distribucion_experiencia.png", plot = grafico_experiencia)
grafico_experiencia

```

## Distribucion de ubicacion laboral

```{r}

grafico_ubicacion<- ggplot(datos_limpios, aes(x = Work_Location)) +
  geom_bar(binwidth = 5, fill = "#f1948a", color = "gray") +
  labs(title = "Modalidad de trabajo", x = "Modalidad de trabajo", y = "Cantidad") +
  theme_minimal()
ggsave("../resultados/graficos/distribucion_ubicacion.png", plot = grafico_ubicacion)
grafico_ubicacion

```

## Distribucion de horas semanales trabajadas por modalidad laboral

```{r}

grafico_horas_ubicacion <- ggplot(data = datos, aes(x = Work_Location, y = Hours_Worked_Per_Week)) +
  geom_boxplot(fill = "#58d68d", color = "darkgray") +  # Gráfico de caja
  labs(title = "Horas Semanales por Ubicación Laboral",
       x = "Ubicación Laboral",
       y = "Horas Trabajadas por Semana") +
  theme_minimal()  # Aplicar un tema minimalista
ggsave("../resultados/graficos/distribucion_horas_ubicacion.png", plot = grafico_horas_ubicacion)
grafico_horas_ubicacion

```

## Distribucion de numero de reuniones virtuales por ubicacion

```{r}

grafico_reuniones_ubicacion  <- ggplot(data = datos, aes(x = Work_Location, y = Number_of_Virtual_Meetings)) +
  geom_boxplot(fill = "#f7dc6f", color = "gray") +  # Gráfico de caja
  labs(title = "Reuniones virtuales por Modalidad Laboral",
       x = "Modalidad Laboral",
       y = "Horas en reuniones virtuales") +
  theme_minimal()  # Aplicar un tema minimalista
ggsave("../resultados/graficos/distribucion_reuniones_ubicacion.png", plot = grafico_reuniones_ubicacion)
grafico_reuniones_ubicacion

```

## Distribucion de balance vida por ubicacion

```{r}

grafico_balance_ubicacion <- ggplot(datos) + 
  geom_bar(aes(x = Work_Location, fill = Work_Life_Balance_Rating), 
           position = "dodge") +  # Para que las barras no se apilen
  scale_fill_brewer(palette = "Pastel1") +  # Usar la paleta de colores pastel
  labs(
    title = "Modalidad laboral y Balance Vida-Trabajo",
    x = "Modalidad Laboral",
    y = "Cantidad",
    fill = "Balance Vida-Trabajo"
  ) +
  theme_minimal()  # Usar un tema minimalista para una apariencia limpia


ggsave("../resultados/graficos/distribucion_balance_ubicacion.png", plot = grafico_balance_ubicacion)
grafico_balance_ubicacion

```

## Distribucion de nivel de estrés por ubicacion

```{r}

grafico_estres_ubicacion <- ggplot(datos) + 
  geom_bar(aes(x = Work_Location, fill = Stress_Level), 
           position = "dodge") +  # Para que las barras no se apilen
  scale_fill_brewer(palette = "Pastel1") +  # Usar la paleta de colores pastel
  labs(
    title = "Modalidad Laboral y Nivel de estres",
    x = "Modalidad Laboral",
    y = "Cantidad",
    fill = "Nivel de estres"
  ) +
  theme_minimal()  # Usar un tema minimalista para una apariencia limpia

ggsave("../resultados/graficos/distribucion_estres_ubicacion.png", plot = grafico_estres_ubicacion)
grafico_estres_ubicacion

```

## Distribucion de estado de salud mental

```{r}

grafico_salud_mental <- ggplot(datos_limpios, aes(x = Mental_Health_Condition)) +
  geom_bar(binwidth = 5, fill = "#6c3483", color = "gray") +
  labs(title = "Estado de Salud mental", x = "Salud Mental", y = "Cantidad") +
  theme_minimal()
ggsave("../resultados/graficos/distribucion_salud_mental.png", plot = grafico_salud_mental)
grafico_salud_mental

```

## Distribucion de estado de salud mental por ubicacion

```{r}

grafico_salud_mental_ubicacion <- ggplot(datos) + 
  geom_bar(aes(x = Work_Location, fill = Mental_Health_Condition), 
           position = "dodge") +  # Para que las barras no se apilen
  scale_fill_brewer(palette = "Pastel1") +  # Usar la paleta de colores pastel
  labs(
    title = "Modalidad laboral y Salud mental",
    x = "Modalidad laboral",
    y = "Cantidad",
    fill = "Salud mental"
  ) +
  theme_minimal()  # Usar un tema minimalista para una apariencia limpia

ggsave("../resultados/graficos/distribucion_salud_mental_ubicacion.png", plot = grafico_salud_mental_ubicacion)
grafico_salud_mental_ubicacion

```

## Distribucion de acceso a recursos de salud mental por ubicacion

```{r}

grafico_acceso_recursos_ubicacion <- ggplot(datos) + 
  geom_bar(aes(x = Work_Location, fill = Access_to_Mental_Health_Resources), 
           position = "dodge") +  # Para que las barras no se apilen
  scale_fill_brewer(palette = "Pastel1") +  # Usar la paleta de colores pastel
  labs(
    title = "Modalidad laboral y Acceso a recursos de salud mental",
    x = "Modalidad laboral",
    y = "Cantidad",
    fill = "Acces a recursos "
  ) +
  theme_minimal()  # Usar un tema minimalista para una apariencia limpia

ggsave("../resultados/graficos/distribucion_acceso_recursos_ubicacion.png", plot = grafico_acceso_recursos_ubicacion)
grafico_acceso_recursos_ubicacion

```

## Distribucion de cambio en la productividad por ubicacion

```{r}

# Calcular las frecuencias de las combinaciones de Work_Location y Productivity_Change
cant_productivity <- datos_limpios %>%
  count(Work_Location, Productivity_Change)

# Crear el gráfico con geom_tile para visualizar las frecuencias
grafico_productividad_ubicacion <- ggplot(data = cant_productivity) +
  aes(x = Work_Location, y = Productivity_Change, fill = n) +  # Mapear Work_Location y Productivity_Change
  geom_tile(colour = "white") +  # Agregar bordes blancos entre las celdas
  scale_y_discrete("Cambio de Productividad") +  # Etiqueta del eje y
  scale_x_discrete("Ubicación de Trabajo") +  # Etiqueta del eje x
  scale_fill_gradient(low = "lightgreen", high = "lightblue") +  # Escala de colores, puedes ajustar estos colores
  labs(
    title = "Productividad por Ubicación de Trabajo",
    fill = "Cantidad"  # Título de la leyenda
  ) +
  theme_minimal()  # Tema limpio para el gráfico


ggsave("../resultados/graficos/distribucion_prod_ubicacion.png", plot = grafico_productividad_ubicacion)
grafico_productividad_ubicacion

```

## Grafico de aislamiento y ubicacion

```{r}
  
# Paso 1: Calcular las frecuencias de las combinaciones de Work_Location y Social_Isolation_Rating
frecuencias_combinacion <- datos_limpios %>%
  count(Work_Location, Social_Isolation_Rating)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Work_Location", "Social_Isolation_Rating"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_aislamiento_ubicacion <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Work_Location, y = Social_Isolation_Rating, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#e8daef", high = "#4a235a") +  # Escala de colores basada en la frecuencia
  labs(title = "Aislamiento por Modalidad de trabajo", x = "Modalidad laboral", y = "Aislamiento Social", fill = "Cantidad") +  # Títulos de los ejes y leyenda
  theme_minimal() +  # Tema limpio
  theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )
  
ggsave("../resultados/graficos/distribucion_aislam_ubicacion.png", plot = grafico_aislamiento_ubicacion)
grafico_aislamiento_ubicacion

```

## Distribucion de satisfaccion con el trabajo remoto por aislamiento social

```{r}
 
# Paso 1: Calcular las frecuencias de las combinaciones de Social_Isolation_Rating y Satisfaction_with_Remote_Work
frecuencias_combinacion <- datos_limpios %>%
  count(Social_Isolation_Rating, Satisfaction_with_Remote_Work)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Social_Isolation_Rating", "Satisfaction_with_Remote_Work"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_aislamiento_satisfaccion <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Social_Isolation_Rating, y = Satisfaction_with_Remote_Work, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#f2d7d5", high = "#A50034") +  # Escala de colores basada en la frecuencia
  labs(x = "Aislamiento social", y = "Satisfaccion", fill = "Frecuencia") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
  theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )

  
ggsave("../resultados/graficos/distribucion_aislamiento_satisfaccion.png", plot = grafico_aislamiento_satisfaccion)
grafico_aislamiento_satisfaccion

```

## Distribucion de soporte de la empresa para trabajo remoto

```{r}

# Paso 1: Calcular las frecuencias de las combinaciones de Company_Support_for_Remote_Work y Work_Location
frecuencias_combinacion <- datos_limpios %>%
  count(Company_Support_for_Remote_Work, Work_Location)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Company_Support_for_Remote_Work", "Work_Location"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_frec_soporte_ubicacion <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Work_Location, y = Company_Support_for_Remote_Work, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#cfcfcf", high = "darkblue") +  # Escala de colores basada en la frecuencia
  labs(title = "Soporte para trabajo remoto", x = "Modalidad laboral", y = "Soporte Trabajo Remoto", fill = "Frecuencia") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
  theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )

ggsave("../resultados/graficos/distribucion_frec_soporte_ubicacion.png", plot = grafico_frec_soporte_ubicacion)
grafico_frec_soporte_ubicacion

```

## Distribucion de actividad fisica y salud mental

```{r}

# Paso 1: Calcular las frecuencias de las combinaciones de Company_Support_for_Remote_Work y Work_Location
frecuencias_combinacion <- datos_limpios %>%
  count(Physical_Activity, Work_Location)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Physical_Activity", "Work_Location"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_actividad_salud <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Physical_Activity, y = Company_Support_for_Remote_Work, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#d4efdf", high = "#145a32") +  # Escala de colores basada en la frecuencia
  labs(title = "Actividad fisica y salud mental", x = "Actividad fisica", y = "Salud mental", fill = "Frecuencia") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
   theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )

ggsave("../resultados/graficos/distribucion_actividad_salud.png", plot = grafico_actividad_salud)
grafico_actividad_salud

```

## Distribucion de calidad de sueño y salud mental

```{r}


# Paso 1: Calcular las frecuencias de las combinaciones de Sleep_Quality y Work_Location
frecuencias_combinacion <- datos_limpios %>%
  count(Sleep_Quality, Mental_Health_Condition)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Sleep_Quality", "Mental_Health_Condition"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_sueño_salud <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Sleep_Quality, y = Mental_Health_Condition, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#f6ddcc", high = "#ba4a00") +  # Escala de colores basada en la frecuencia
  labs(title = "Calidad de sueño y Salud mental", x = "Calidad de sueño", y = "Salud mental", fill = "Cantidad") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
   theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )


ggsave("../resultados/graficos/distribucion_sueño_salud.png", plot = grafico_sueño_salud)
grafico_sueño_salud

```

## Distribucion de region

```{r}

data(world)

# Paso 1: Calcular la frecuencia por región
frecuencias_regiones <- datos_limpios %>%
  group_by(Region) %>%
  summarise(Frecuencia = n(), .groups = "drop")

# Paso 2: Asignar regiones en el mapa y unir con frecuencias
world <- world %>%
  mutate(Region = case_when(
    continent == "Europe" ~ "Europe",
    continent == "Asia" ~ "Asia",
    continent == "North America" ~ "North America",
    continent == "South America" ~ "South America",
    continent == "Africa" ~ "Africa",
    continent == "Oceania" ~ "Oceania",
    TRUE ~ "Other"
  ))

# Unión entre el mapa y las frecuencias
world_datos <- world %>%
  left_join(frecuencias_regiones, by = "Region") %>%
  mutate(Frecuencia = replace_na(Frecuencia, 0)) # Asignar 0 a las regiones sin datos

# Generar una paleta pastel diferenciada de Brewer
colores_regiones <- setNames(
  brewer.pal(n = n_distinct(world_datos$Region), name = "Pastel1"),
  levels(factor(world_datos$Region))
)

# Crear etiquetas personalizadas para la leyenda con las frecuencias
etiquetas_regiones <- frecuencias_regiones %>%
  mutate(Leyenda = paste(Region, ":", Frecuencia)) %>%
  arrange(Region) %>%
  pull(Leyenda)

# Crear el gráfico
grafico_regiones <- ggplot(data = world_datos) +
  geom_sf(aes(fill = Region), color = "gray", size = 0.1) +
  scale_fill_manual(
    values = colores_regiones,    # Colores de la paleta pastel
    labels = etiquetas_regiones, # Etiquetas personalizadas con las frecuencias
    na.value = "white"            # Color para valores NA
  ) +
  labs(
    title = "Participantes por Region",
    fill = "Región (Frecuencia)"  # Título de la leyenda
  ) +
  theme_minimal() +
  theme(
    legend.position = "right"     # Ubicación de la leyenda
  )

ggsave("../resultados/graficos/distribucion_regiones.png", plot = grafico_regiones)
grafico_regiones

```

## Relación entre horas trabajadas y nivel de estrés

```{r}

grafico_horas_estres <- ggplot(datos, aes(x = Stress_Level, y = Hours_Worked_Per_Week)) +
  geom_boxplot(fill = "#bb8fce") +
  labs(title = "Nivel de Estres por Horas trabajas semanales", x = "Stress_Level", y = "Hours_Worked_Per_Week") +
  theme_minimal()


ggsave("../resultados/graficos/horas_vs_estres.png", plot = grafico_horas_estres)
grafico_horas_estres
  
```

## Distribución de niveles de estrés por género

```{r}

# Paso 1: Calcular las frecuencias de las combinaciones de Sleep_Quality y Work_Location
frecuencias_combinacion <- datos_limpios %>%
  count(Genero, Stress_Level)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Genero", "Stress_Level"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_estres_por_genero <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Genero, y = Stress_Level, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#fcf3cf", high = "#9c640c") +  # Escala de colores basada en la frecuencia
  labs(x = "Genero", y = "Nivel de estres", fill = "Cantidad") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
   theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )

ggsave("../resultados/graficos/estres_por_genero.png", plot = grafico_estres_por_genero)
grafico_estres_por_genero

```

## Frecuencia de condiciones de salud mental

```{r}

grafico_salud_mental <- ggplot(datos_limpios, aes(x = Mental_Health_Condition)) +
  geom_bar(fill = "purple") +
  labs(title = "Condiciones de Salud Mental", x = "Condición", y = "Frecuencia")
ggsave("../resultados/graficos/condiciones_salud_mental.png", plot = grafico_salud_mental)
grafico_salud_mental

```

# Análisis adicional

## Calidad del sueño vs nivel de estrés

```{r}


# Paso 1: Calcular las frecuencias de las combinaciones de Sleep_Quality y Work_Location
frecuencias_combinacion <- datos_limpios %>%
  count(Sleep_Quality, Stress_Level)

# Paso 2: Unir las frecuencias con el dataframe original
datos_limpios_con_frecuencias <- datos_limpios %>%
  left_join(frecuencias_combinacion, by = c("Sleep_Quality", "Stress_Level"))

# Paso 3: Crear el mapa de calor con geom_tile
grafico_sueno_vs_estres  <- ggplot(data = datos_limpios_con_frecuencias) +
  aes(x = Sleep_Quality, y = Stress_Level, fill = n) +  # Mapear la frecuencia al color de relleno
  geom_tile(color = "white") +  # Crear las celdas con bordes blancos
  scale_fill_gradient(low = "#d6eaf8", high = "#21618c") +  # Escala de colores basada en la frecuencia
  labs(x = "Calidad de Sueño", y = "Nivel de estres", fill = "Frecuencia") +  # Títulos de los ejes y leyenda
  theme_minimal() + # Tema limpio
   theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)  # Ajustar las etiquetas
    )


ggsave("../resultados/graficos/sueno_vs_estres.png", plot = grafico_sueno_vs_estres)
grafico_sueno_vs_estres

```

# Conclusiones

Este análisis permite identificar patrones clave en la relación entre el
trabajo remoto y la salud mental. Las visualizaciones destacan la
influencia de variables como las horas trabajadas, el género y la
calidad del sueño en los niveles de estrés. Este conocimiento puede ser
útil para empresas y profesionales interesados en mejorar el bienestar
laboral en un contexto remoto.
